
# --------- Message Output

MSG_COMPILING		:= Compiling
MSG_DEPENDENCY		:= Generating dependency for 
MSG_LINKING			:= Linking to
MSG_RESET_DEVICE	:= "RESETTING DEVICE !"
MSG_PROG_LOCATION	:= "Your programm can be found at"
MSG_FLASH_LOCATION	:= "Using this file for Flashing: "
MSG_LISTING			:= "- Generating Disassembly"
MAP_LISTING			:= "- Generating memory map"
MSG_TRACER			:= "Starting Tracer in"
MSG_FINISH			:= "--------------- Make done ---------------"
NEWLINE				:= "\n"
TABULATOR			:= "\t"

# --------- 

TARGET					:= $(PROJECT)
VERSION					:= $(VERSION_MAJOR).$(VERSION_MINOR)
OBJECT_DIRECTORY		:= obj
DEBUG_DIRECTORY			:= $(OBJECT_DIRECTORY)/debug
DEPENDENCY_DIRECTORY	:= $(OBJECT_DIRECTORY)/dependency
RELEASE_DIRECTORY		:= release/$(VERSION)
FORMAT					:= ihex
DEBUG_ENABLED			:= -DTRACER_ENABLED

RELEASE_OBJECTS			:= $(CSRCS:%.c=$(OBJECT_DIRECTORY)/%.o)
DEBUG_OBJECTS			:= $(CSRCS:%.c=$(DEBUG_DIRECTORY)/%.o)
DEPENDENCY_OBJECTS		:= $(CSRCS:%.c=$(DEPENDENCY_DIRECTORY)/%.o)

LOCAL_OBJECTS			:= $(notdir $(RELEASE_OBJECTS))
LOCAL_DEBUG_OBJECTS		:= $(notdir $(DEBUG_OBJECTS))

TRACER_PATH				:= $(BASE_PATH)/rpi_control_release/TRACER/shcTracer

CFLAGS					+= -pedantic -Wall

# --------- 

SERVICE_DIRECTORY	= service
TARGET_SERVICE_DIR	= /etc/systemd/system
TARGET_SERVICE		= shcd.service
TARGET_DAEMON		= shcd
TARGET_HOME_DIRECTORY	= /etc/SmartHomeClient
TARGET_LOG_DIRECTORY	= $(TARGET_HOME_DIRECTORY)/log
TARGET_CFG_DIRECTPRY	= $(TARGET_HOME_DIRECTORY)/cfg
DEFAULT_CFG_FILE_PATH	= cfg

# --------- 

all: release_obj hex_file lss_file prog_size
	$(VERBOSE) $(CP) $(OBJECT_DIRECTORY)/$(TARGET).$(PLATTFORM_EXTENSION) $(TARGET).$(PLATTFORM_EXTENSION)
	$(VERBOSE) $(ECHO) $(MSG_PROG_LOCATION) $(TARGET).$(PLATTFORM_EXTENSION)
	$(VERBOSE) $(ECHO) $(MSG_FINISH)

debug: debug_obj hex_file lss_file prog_size
	$(VERBOSE) $(CP) $(OBJECT_DIRECTORY)/$(TARGET).$(PLATTFORM_EXTENSION) $(TARGET).$(PLATTFORM_EXTENSION)

ifdef CC_COPY
	$(VERBOSE) $(CP) $(OBJECT_DIRECTORY)/$(TARGET).map $(TARGET).map
endif

	$(VERBOSE) $(ECHO) $(MSG_PROG_LOCATION) $(TARGET).$(PLATTFORM_EXTENSION)
	$(VERBOSE) $(ECHO) $(MSG_FINISH)

release: release_dir release_obj hex_file lss_file prog_size
	$(VERBOSE) $(CP) $(OBJECT_DIRECTORY)/$(TARGET).hex $(RELEASE_DIRECTORY)/$(TARGET).hex
	$(VERBOSE) $(CP) $(OBJECT_DIRECTORY)/$(TARGET).lss $(RELEASE_DIRECTORY)/$(TARGET).lss
	$(VERBOSE) $(CP) $(OBJECT_DIRECTORY)/$(TARGET).elf $(RELEASE_DIRECTORY)/$(TARGET).$(PLATTFORM_EXTENSION)
	$(VERBOSE) $(CP) $(OBJECT_DIRECTORY)/$(TARGET).map $(RELEASE_DIRECTORY)/$(TARGET).map
	$(VERBOSE) $(ECHO) $(MSG_PROG_LOCATION) $(RELEASE_DIRECTORY)/$(TARGET)
	$(VERBOSE) $(ECHO) $(MSG_FINISH)

unittest: all

unittest_debug: debug

# --------- 

eclipse: dependency_obj 

# --------- 

clean:
	$(VERBOSE) $(ECHO) "- Removing object directory from filesystem"
	$(VERBOSE) $(RM) $(RM_FLAGS) $(OBJECT_DIRECTORY)
	$(VERBOSE) $(ECHO) "- Removing generated program-files"
	$(VERBOSE) $(RM) $(RM_FLAGS) $(TARGET).hex
	$(VERBOSE) $(RM) $(RM_FLAGS) $(TARGET).lss
	$(VERBOSE) $(RM) $(RM_FLAGS) $(TARGET).$(PLATTFORM_EXTENSION)
	$(VERBOSE) $(RM) $(RM_FLAGS) $(TARGET).map
	$(VERBOSE) $(RM) $(RM_FLAGS) $(TARGET)
	$(VERBOSE) $(ECHO) $(MSG_FINISH)

# --------- 

run:
	./$(TARGET).$(PLATTFORM_EXTENSION)

# --------- 

release_obj: obj_dir $(RELEASE_OBJECTS)
	$(VERBOSE) $(ECHO) "- Generating Relase-Objects - Version: $(VERSION)"
	$(VERBOSE) $(CC) $(CFLAGS) $(OPTIMIZATION) $(DEFS) $(LDFLAGS) $(MCU_FLAG) $(INC_PATH:%=-I%) $(LOCAL_OBJECTS:%=$(OBJECT_DIRECTORY)/%) -o $(OBJECT_DIRECTORY)/$(TARGET).$(PLATTFORM_EXTENSION) $(LFLAGS) $(LIBS)

debug_obj: debug_dir $(DEBUG_OBJECTS)
	$(VERBOSE) $(ECHO) - Generating Debug-Objects - Version: $(VERSION)
	$(VERBOSE) $(CC) $(CFLAGS) $(OPTIMIZATION) $(DEFS) $(LDFLAGS) $(MCU_FLAG) $(INC_PATH:%=-I%) $(DEBUG_ENABLED) $(LOCAL_DEBUG_OBJECTS:%=$(DEBUG_DIRECTORY)/%) -o $(OBJECT_DIRECTORY)/$(TARGET).$(PLATTFORM_EXTENSION) $(LIBS)

dependency_obj: dependency_dir $(DEPENDENCY_OBJECTS)

# --------- 

hex_file:
ifdef CC_COPY
	$(VERBOSE) $(ECHO) "- Generating $(OBJECT_DIRECTORY)/$(TARGET).hex"
	$(VERBOSE) $(CC_COPY) $(SECTIONS) -O $(FORMAT) $(OBJECT_DIRECTORY)/$(TARGET).elf $(OBJECT_DIRECTORY)/$(TARGET).hex
	$(VERBOSE) $(CC_COPY) $(SECTIONS) $(HEXFLAGS) -O $(FORMAT) $(OBJECT_DIRECTORY)/$(TARGET).elf $(OBJECT_DIRECTORY)/$(TARGET).hex
	$(VERBOSE) $(CP) $(OBJECT_DIRECTORY)/$(TARGET).hex $(TARGET).hex
	$(VERBOSE) $(CP) $(OBJECT_DIRECTORY)/$(TARGET).map $(TARGET).map
endif
	
lss_file:
ifdef CC_DUMP
	$(VERBOSE) $(ECHO) $(MSG_LISTING)
	$(VERBOSE) $(CC_DUMP) --disassemble-all -h $(OBJECT_DIRECTORY)/$(TARGET).$(PLATTFORM_EXTENSION) > $(OBJECT_DIRECTORY)/$(TARGET).lss
	$(VERBOSE) $(CP) $(OBJECT_DIRECTORY)/$(TARGET).lss $(TARGET).lss
endif
	
obj_dir:
	$(VERBOSE) $(ECHO) "- Creating Object directory: $(OBJECT_DIRECTORY)"
	$(VERBOSE) $(MK) $(OBJECT_DIRECTORY)
	
prog_size:
	$(CC_SIZE) $(MCU_SIZE_FLAGS) $(OBJECT_DIRECTORY)/$(TARGET).$(PLATTFORM_EXTENSION)

# --------- 

uf2:
	$(VERBOSE) $(ELF2UF) $(TARGET).$(PLATTFORM_EXTENSION) $(TARGET).uf2

# --------- 
	
debug_dir: obj_dir
	$(VERBOSE) $(ECHO) "- Creating Debug directory: $(DEBUG_DIRECTORY)"
	$(VERBOSE) $(MK) $(DEBUG_DIRECTORY)
	
dependency_dir: obj_dir
	$(VERBOSE) $(ECHO) "- Creating Dependency directory: $(DEPENDENCY_DIRECTORY)"
	$(VERBOSE) $(MK) $(DEPENDENCY_DIRECTORY)

release_dir:
	$(VERBOSE) $(ECHO) "- Creating Release directory: $(RELEASE_DIRECTORY)"
	$(VERBOSE) $(MK) $(RELEASE_DIRECTORY)

# ---------

.PHONY: show_config
show_config:
	$(VERBOSE) $(ECHO) MCU: $(foreach elem, $(MCU), $(NEWLINE)$(TABULATOR)$(elem))
	$(VERBOSE) $(ECHO) PLATTFORM: $(foreach elem, $(PLATTFORM), $(NEWLINE)$(TABULATOR)$(elem))
	$(VERBOSE) $(ECHO) COMMON_MODULES: $(foreach elem, $(COMMON_MODULES), $(NEWLINE)$(TABULATOR)$(elem))
	$(VERBOSE) $(ECHO) APP_TASK_CFG: $(foreach elem, $(APP_TASK_CFG), $(NEWLINE)$(TABULATOR)$(elem))
	$(VERBOSE) $(ECHO) EXPANSION_BOARD_CFG: $(foreach elem, $(EXPANSION_BOARD_CFG), $(NEWLINE)$(TABULATOR)$(elem))
	$(VERBOSE) $(ECHO) DRIVER_MODULE_CFG: $(foreach elem, $(DRIVER_MODULE_CFG), $(NEWLINE)$(TABULATOR)$(elem))
	$(VERBOSE) $(ECHO) PROTOCOL_CFG: $(foreach elem, $(PROTOCOL_CFG), $(NEWLINE)$(TABULATOR)$(elem))
	$(VERBOSE) $(ECHO) POWER_MANAGEMENT_CFG: $(foreach elem, $(POWER_MANAGEMENT_CFG), $(NEWLINE)$(TABULATOR)$(elem))
	$(VERBOSE) $(ECHO) COPRO_INTERFACE_CFG: $(foreach elem, $(COPRO_INTERFACE_CFG), $(NEWLINE)$(TABULATOR)$(elem))
	$(VERBOSE) $(ECHO) COMMAND_INTERFACE_CFG: $(foreach elem, $(COMMAND_INTERFACE_CFG), $(NEWLINE)$(TABULATOR)$(elem))
	$(VERBOSE) $(ECHO) SENSOR_MODULE_CFG: $(foreach elem, $(SENSOR_MODULE_CFG), $(NEWLINE)$(TABULATOR)$(elem))
	$(VERBOSE) $(ECHO) THIRD_PARTY_MODULES: $(foreach elem, $(THIRD_PARTY_MODULES), $(NEWLINE)$(TABULATOR)$(elem))
	$(VERBOSE) $(ECHO) CSRCS: $(foreach elem, $(CSRCS), $(NEWLINE)$(TABULATOR)$(elem))
	$(VERBOSE) $(ECHO) LIBS: $(foreach elem, $(subst -l , , $(LIBS)), $(NEWLINE)$(TABULATOR)$(elem))
	$(VERBOSE) $(ECHO) DEFS: $(foreach elem, $(subst -D , , $(DEFS)), $(NEWLINE)$(TABULATOR)$(elem))

# ---------

tracer:
	$(VERBOSE) $(ECHO) $(MSG_TRACER) $(TRACER_PATH) -console -file $(PROJECT)_v$(VERSION)_trace_output.txt -path .
	$(TRACER_PATH) -console -file $(PROJECT)_v$(VERSION)_trace_output.txt

# --------- 

flash: 
	$(VERBOSE) $(ECHO) "$(MSG_FLASH_LOCATION) $(TARGET).hex"
	$(VERBOSE) $(AVR_DUDE) -C $(AVR_DUDE_CFG_FILE) -c $(AVR_DUDE_PROGRAMMER) -p $(AVR_DUDE_MCU_NAME) $(AVR_DUDE_PORT) -b $(AVR_DUDE_BAUDRATE) -U flash:w:"$(TARGET).hex":$(AVR_DUDE_UPDATE_FORMAT)
	$(VERBOSE) $(GPIO_MODE) $(GPIO_PIN_SCK) $(GPIO_MODE_SCK)
	$(VERBOSE) $(GPIO_MODE) $(GPIO_PIN_MOSI) $(GPIO_MODE_MOSI)
	$(VERBOSE) $(GPIO_MODE) $(GPIO_PIN_MISO) $(GPIO_MODE_MISO)
	$(VERBOSE) $(ECHO) $(MSG_FINISH)
	
fuses:
	$(VERBOSE) $(AVR_DUDE) -C $(AVR_DUDE_CFG_FILE) -c $(AVR_DUDE_PROGRAMMER) -p $(AVR_DUDE_MCU_NAME) $(AVR_DUDE_PORT) -b $(AVR_DUDE_BAUDRATE) -U lfuse:w:$(AVR_LFUSE):m -U hfuse:w:$(AVR_HFUSE):m -U efuse:w:$(AVR_EFUSE):m
	$(VERBOSE) $(ECHO) $(MSG_FINISH)

reset:
	$(VERBOSE) $(ECHO) $(MSG_RESET_DEVICE)
	$(VERBOSE) gpio mode 5 out
	$(VERBOSE) gpio write 5 0
	$(VERBOSE) gpio write 5 1
	$(VERBOSE) gpio mode 5 in
	$(VERBOSE) gpio mode 5 up
	$(VERBOSE) $(ECHO) $(MSG_FINISH)

# ---------

$(OBJECT_DIRECTORY)/%.o: %.c
	$(VERBOSE) $(ECHO) "$(MSG_COMPILING) $(notdir $<)"
	$(VERBOSE) $(CC) -c $(OPTIMIZATION) $(DEFS) $(CFLAGS) $(LIBS) $(MCU_FLAG) $(INC_PATH:%=-I%) $< -o $(OBJECT_DIRECTORY)/$(notdir $@)

$(DEBUG_DIRECTORY)/%.o: %.c
	$(VERBOSE) $(ECHO) "$(MSG_COMPILING) $(notdir $<)"
	$(VERBOSE) $(CC) -c $(OPTIMIZATION) $(DEFS) $(CFLAGS) $(DEBUG_ENABLED) $(LIBS) $(MCU_FLAG) $(INC_PATH:%=-I%) $< -o $(DEBUG_DIRECTORY)/$(notdir $@)
	
$(DEPENDENCY_DIRECTORY)/%.o: %.c
	$(VERBOSE) $(ECHO) "$(MSG_DEPENDENCY) $(notdir $<)"
	$(VERBOSE) $(CC) -M -c $(DEFS) $(CFLAGS) $(LIBS) $(MCU_FLAG) $(INC_PATH:%=-I%) $< -o $(DEPENDENCY_DIRECTORY)/$(notdir $@)

# --------- 

install_execute:

	$(VERBOSE) $(ECHO) "- Create Program-Home: $(TARGET_HOME_DIRECTORY)"

	$(VERBOSE) $(ECHO) $(TARGET_HOME_DIRECTORY)
	$(VERBOSE) $(MK) $(TARGET_HOME_DIRECTORY)
	$(VERBOSE) $(MAKE_OWNER) $(TARGET_HOME_DIRECTORY)
	$(VERBOSE) $(MAKE_DIR_RIGHTS) $(TARGET_HOME_DIRECTORY)

	$(VERBOSE) $(ECHO) $(TARGET_LOG_DIRECTORY)
	$(VERBOSE) $(MK) $(TARGET_LOG_DIRECTORY)
	$(VERBOSE) $(MAKE_OWNER) $(TARGET_LOG_DIRECTORY)
	$(VERBOSE) $(MAKE_DIR_RIGHTS) $(TARGET_LOG_DIRECTORY)

	$(VERBOSE) $(ECHO) $(TARGET_CFG_DIRECTPRY)
	$(VERBOSE) $(MK) $(TARGET_CFG_DIRECTPRY)
	$(VERBOSE) $(MAKE_OWNER) $(TARGET_CFG_DIRECTPRY)
	$(VERBOSE) $(MAKE_DIR_RIGHTS) $(TARGET_CFG_DIRECTPRY)

	$(VERBOSE) $(ECHO) "- Install CFG-Files"

	$(VERBOSE) $(ECHO) $(TARGET_CFG_DIRECTPRY)/shc_configuration.conf
	$(VERBOSE) $(CP) $(DEFAULT_CFG_FILE_PATH)/smart_home_configuration_file.txt $(TARGET_CFG_DIRECTPRY)/shc_configuration.conf
	$(VERBOSE) $(MAKE_OWNER) $(TARGET_CFG_DIRECTPRY)/shc_configuration.conf
	$(VERBOSE) $(MAKE_FILE_RIGHTS) $(TARGET_CFG_DIRECTPRY)/shc_configuration.conf

	$(VERBOSE) $(ECHO) $(TARGET_CFG_DIRECTPRY)/shc_report.conf
	$(VERBOSE) $(CP) $(DEFAULT_CFG_FILE_PATH)/smart_home_report_file.txt $(TARGET_CFG_DIRECTPRY)/shc_report.conf
	$(VERBOSE) $(MAKE_OWNER) $(TARGET_CFG_DIRECTPRY)/shc_report.conf
	$(VERBOSE) $(MAKE_FILE_RIGHTS) $(TARGET_CFG_DIRECTPRY)/shc_report.conf

	$(VERBOSE) $(ECHO) $(TARGET_CFG_DIRECTPRY)/shc_command.conf
	$(VERBOSE) $(CP) $(DEFAULT_CFG_FILE_PATH)/smart_home_command_file.txt $(TARGET_CFG_DIRECTPRY)/shc_command.conf
	$(VERBOSE) $(MAKE_OWNER) $(TARGET_CFG_DIRECTPRY)/shc_command.conf
	$(VERBOSE) $(MAKE_FILE_RIGHTS) $(TARGET_CFG_DIRECTPRY)/shc_command.conf

	$(VERBOSE) $(ECHO) - Install SHC-Daemon

	$(VERBOSE) $(ECHO) $(TARGET_HOME_DIRECTORY)/$(TARGET_DAEMON)
	$(VERBOSE) $(CP) $(RELEASE_DIRECTORY)/$(TARGET).$(PLATTFORM_EXTENSION) $(TARGET_HOME_DIRECTORY)/$(TARGET_DAEMON)
	$(VERBOSE) $(MAKE_OWNER) $(TARGET_HOME_DIRECTORY)/$(TARGET_DAEMON)
	$(VERBOSE) $(MAKE_EXE) $(TARGET_HOME_DIRECTORY)/$(TARGET_DAEMON)

	$(VERBOSE) $(ECHO) - Install Service at systemd: $(TARGET_SERVICE_DIR)/$(TARGET_SERVICE)

	$(VERBOSE) $(ECHO) $(TARGET_SERVICE_DIR)/$(TARGET_SERVICE)
	$(VERBOSE) $(CP) $(SERVICE_DIRECTORY)/$(TARGET_SERVICE) $(TARGET_SERVICE_DIR)/$(TARGET_SERVICE)
	$(VERBOSE) $(MAKE_SERVICE_RIGHTS) $(TARGET_SERVICE_DIR)/$(TARGET_SERVICE)

	$(VERBOSE) $(ECHO) - Enabling new Serice

	$(VERBOSE) $(MAKE_SERVVICE_RELOAD)
	$(VERBOSE) $(MAKE_SERVICE_ENABLE) $(TARGET_SERVICE)

	$(VERBOSE) $(ECHO) $(MSG_FINISH)

install: clean release install_execute clean


uninstall: stop_service
	$(VERBOSE) $(ECHO) - Disabling service: $(TARGET_SERVICE)
	$(VERBOSE) $(MAKE_SERVICE_DISABLE) $(TARGET_SERVICE)

	$(VERBOSE) $(ECHO) - Removing service: $(TARGET_SERVICE)
	$(VERBOSE) $(RM) $(RM_FLAGS) $(TARGET_SERVICE)

	$(VERBOSE) $(MAKE_SERVVICE_RELOAD)

	$(VERBOSE) $(ECHO) - Remove SHC-Daemon

	$(VERBOSE) $(ECHO) $(TARGET_HOME_DIRECTORY)/$(TARGET_DAEMON)
	$(VERBOSE) $(RM) $(RM_FLAGS) $(TARGET_HOME_DIRECTORY)/$(TARGET_DAEMON)

	$(VERBOSE) $(ECHO) - Remove CFG-Files

	$(VERBOSE) $(ECHO) $(TARGET_CFG_DIRECTPRY)/shc_configuration.conf
	$(VERBOSE) $(RM) $(RM_FLAGS) $(TARGET_CFG_DIRECTPRY)/shc_configuration.conf

	$(VERBOSE) $(ECHO) $(TARGET_CFG_DIRECTPRY)/shc_report.conf
	$(VERBOSE) $(RM) $(RM_FLAGS) $(TARGET_CFG_DIRECTPRY)/shc_report.conf

	$(VERBOSE) $(ECHO) $(TARGET_CFG_DIRECTPRY)/shc_command.conf
	$(VERBOSE) $(RM) $(RM_FLAGS) $(TARGET_CFG_DIRECTPRY)/shc_command.conf

	$(VERBOSE) $(ECHO) - Remove Program-Home: $(TARGET_HOME_DIRECTORY)

	$(VERBOSE) $(ECHO) $(TARGET_LOG_DIRECTORY)
	$(VERBOSE) $(RM) $(RM_FLAGS) $(TARGET_LOG_DIRECTORY)

	$(VERBOSE) $(ECHO) $(TARGET_CFG_DIRECTPRY)
	$(VERBOSE) $(RM) $(RM_FLAGS) $(TARGET_CFG_DIRECTPRY)

	$(VERBOSE) $(ECHO) $(TARGET_HOME_DIRECTORY)
	$(VERBOSE) $(RM) $(RM_FLAGS) $(TARGET_HOME_DIRECTORY)

	$(VERBOSE) $(ECHO) $(MSG_FINISH)

update: clean release stop_service

	$(VERBOSE) $(ECHO) "- Install SHC-Daemon"

	$(VERBOSE) $(ECHO) "$(TARGET_HOME_DIRECTORY)/$(TARGET_DAEMON)
	$(VERBOSE) $(CP) $(RELEASE_DIRECTORY)/$(TARGET).$(PLATTFORM_EXTENSION) $(TARGET_HOME_DIRECTORY)/$(TARGET_DAEMON)
	$(VERBOSE) $(MAKE_OWNER) $(TARGET_HOME_DIRECTORY)/$(TARGET_DAEMON)
	$(VERBOSE) $(MAKE_EXE) $(TARGET_HOME_DIRECTORY)/$(TARGET_DAEMON)

	$(VERBOSE) $(ECHO) "- Starting service: $(TARGET_SERVICE)"
	$(VERBOSE) $(MAKE_SERVICE_STOP) $(TARGET_SERVICE)

stop_service:
	$(VERBOSE) $(ECHO) "- Stopping service: $(TARGET_SERVICE)"
	$(VERBOSE) $(MAKE_SERVICE_STOP) $(TARGET_SERVICE)

start_service:
	$(VERBOSE) $(ECHO) "- Starting service: $(TARGET_SERVICE)"
	$(VERBOSE) $(MAKE_SERVICE_START) $(TARGET_SERVICE)

# --------- 

fw_update: stop_service
	$(VERBOSE) $(AVR_DUDE) -C $(AVR_DUDE_CFG_FILE) -c $(AVR_DUDE_PROGRAMMER) -p $(AVR_DUDE_MCU_NAME) $(AVR_DUDE_PORT) -b $(AVR_DUDE_BAUDRATE) -U flash:w:"$(AVR_DUDE_UPDATE_PATH)/$(AVR_DUDE_UPDATE_FILE)":$(AVR_DUDE_UPDATE_FORMAT)
	$(VERBOSE) $(GPIO_MODE) $(GPIO_PIN_SCK) $(GPIO_MODE_SCK)
	$(VERBOSE) $(GPIO_MODE) $(GPIO_PIN_MOSI) $(GPIO_MODE_MOSI)
	$(VERBOSE) $(GPIO_MODE) $(GPIO_PIN_MISO) $(GPIO_MODE_MISO)
	$(VERBOSE) $(ECHO) "- Starting service"
	$(VERBOSE) /etc/init.d/$(TARGET_SERVICE) start
	$(VERBOSE) $(ECHO) $(MSG_FINISH)

fw_update_only: stop_service
	$(VERBOSE) $(AVR_DUDE) -C $(AVR_DUDE_CFG_FILE) -c $(AVR_DUDE_PROGRAMMER) -p $(AVR_DUDE_MCU_NAME) $(AVR_DUDE_PORT) -b $(AVR_DUDE_BAUDRATE) -U flash:w:"$(AVR_DUDE_UPDATE_PATH)/$(AVR_DUDE_UPDATE_FILE)":$(AVR_DUDE_UPDATE_FORMAT)
	$(VERBOSE) $(GPIO_MODE) $(GPIO_PIN_SCK) $(GPIO_MODE_SCK)
	$(VERBOSE) $(GPIO_MODE) $(GPIO_PIN_MOSI) $(GPIO_MODE_MOSI)
	$(VERBOSE) $(GPIO_MODE) $(GPIO_PIN_MISO) $(GPIO_MODE_MISO)
	$(VERBOSE) $(ECHO) $(MSG_FINISH)

# --------- 

create_user:
	$(VERBOSE) $(ECHO) - Creating SHC user
	$(VERBOSE) useradd -M -s /bin/false -G gpio,audio,spi shc

git_update:
	$(VERBOSE) git pull
	$(VERBOSE) $(MAKE_FOLDER_RIGHTS)
	$(VERBOSE) $(MAKE_FILE_RIGHTS)

# --------- 

show_version:
	$(VERBOSE) $(ECHO) $(VERSION_MAJOR).$(VERSION_MINOR)

# --------- 
